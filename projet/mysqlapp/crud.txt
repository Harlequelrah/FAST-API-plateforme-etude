def get_user(db: Session, user_id: int):
    return db.query(models.User).filter(models.User.id == user_id).first()


def get_user_by_email(db: Session, email: str):
    return db.query(models.User).filter(models.User.email == email).first()


def get_users(db: Session, skip: int = 0, limit: int = 100):
    return db.query(models.User).offset(skip).limit(limit).all()


# Trier les utilisateurs par leur nom d'utilisateur (ordre croissant)
db.query(models.User).order_by(models.User.username)
group_by :



# Regrouper les utilisateurs par leur rôle
db.query(models.User.role, func.count()).group_by(models.User.role)
join :



# Effectuer une jointure entre les tables des utilisateurs et des rôles
db.query(models.User).join(models.Role, models.User.role_id == models.Role.id)
distinct :



# Récupérer les noms de rôles distincts
db.query(models.Role.name).distinct()
count :



# Compter le nombre total d'utilisateurs
db.query(func.count(models.User.id))
first :



# Récupérer le premier utilisateur avec un certain rôle
db.query(models.User).filter(models.User.role == 'admin').first()
exists :



# Vérifier si des utilisateurs ont un certain rôle
db.query(models.User.id).filter(models.User.role == 'admin').exists()
filter_by :



# Filtrer les utilisateurs par leur rôle (utilisation alternative à filter)
db.query(models.User).filter_by(role='admin')
having :



# Regrouper les utilisateurs par rôle et filtrer ceux ayant plus de 5 utilisateurs dans le groupe
db.query(models.User.role, func.count()).group_by(models.User.role).having(func.count() > 5)
update :



# Mettre à jour le rôle des utilisateurs avec une condition spécifique
db.query(models.User).filter(models.User.age > 25).update({models.User.role: 'senior'})
delete :



# Supprimer les utilisateurs avec un certain rôle
db.query(models.User).filter(models.User.role == 'inactif').delete()
